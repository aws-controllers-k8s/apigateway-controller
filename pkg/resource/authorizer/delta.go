// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package authorizer

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.AuthType, b.ko.Spec.AuthType) {
		delta.Add("Spec.AuthType", a.ko.Spec.AuthType, b.ko.Spec.AuthType)
	} else if a.ko.Spec.AuthType != nil && b.ko.Spec.AuthType != nil {
		if *a.ko.Spec.AuthType != *b.ko.Spec.AuthType {
			delta.Add("Spec.AuthType", a.ko.Spec.AuthType, b.ko.Spec.AuthType)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.AuthorizerCredentials, b.ko.Spec.AuthorizerCredentials) {
		delta.Add("Spec.AuthorizerCredentials", a.ko.Spec.AuthorizerCredentials, b.ko.Spec.AuthorizerCredentials)
	} else if a.ko.Spec.AuthorizerCredentials != nil && b.ko.Spec.AuthorizerCredentials != nil {
		if *a.ko.Spec.AuthorizerCredentials != *b.ko.Spec.AuthorizerCredentials {
			delta.Add("Spec.AuthorizerCredentials", a.ko.Spec.AuthorizerCredentials, b.ko.Spec.AuthorizerCredentials)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.AuthorizerResultTTLInSeconds, b.ko.Spec.AuthorizerResultTTLInSeconds) {
		delta.Add("Spec.AuthorizerResultTTLInSeconds", a.ko.Spec.AuthorizerResultTTLInSeconds, b.ko.Spec.AuthorizerResultTTLInSeconds)
	} else if a.ko.Spec.AuthorizerResultTTLInSeconds != nil && b.ko.Spec.AuthorizerResultTTLInSeconds != nil {
		if *a.ko.Spec.AuthorizerResultTTLInSeconds != *b.ko.Spec.AuthorizerResultTTLInSeconds {
			delta.Add("Spec.AuthorizerResultTTLInSeconds", a.ko.Spec.AuthorizerResultTTLInSeconds, b.ko.Spec.AuthorizerResultTTLInSeconds)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.AuthorizerURI, b.ko.Spec.AuthorizerURI) {
		delta.Add("Spec.AuthorizerURI", a.ko.Spec.AuthorizerURI, b.ko.Spec.AuthorizerURI)
	} else if a.ko.Spec.AuthorizerURI != nil && b.ko.Spec.AuthorizerURI != nil {
		if *a.ko.Spec.AuthorizerURI != *b.ko.Spec.AuthorizerURI {
			delta.Add("Spec.AuthorizerURI", a.ko.Spec.AuthorizerURI, b.ko.Spec.AuthorizerURI)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.IdentitySource, b.ko.Spec.IdentitySource) {
		delta.Add("Spec.IdentitySource", a.ko.Spec.IdentitySource, b.ko.Spec.IdentitySource)
	} else if a.ko.Spec.IdentitySource != nil && b.ko.Spec.IdentitySource != nil {
		if *a.ko.Spec.IdentitySource != *b.ko.Spec.IdentitySource {
			delta.Add("Spec.IdentitySource", a.ko.Spec.IdentitySource, b.ko.Spec.IdentitySource)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.IdentityValidationExpression, b.ko.Spec.IdentityValidationExpression) {
		delta.Add("Spec.IdentityValidationExpression", a.ko.Spec.IdentityValidationExpression, b.ko.Spec.IdentityValidationExpression)
	} else if a.ko.Spec.IdentityValidationExpression != nil && b.ko.Spec.IdentityValidationExpression != nil {
		if *a.ko.Spec.IdentityValidationExpression != *b.ko.Spec.IdentityValidationExpression {
			delta.Add("Spec.IdentityValidationExpression", a.ko.Spec.IdentityValidationExpression, b.ko.Spec.IdentityValidationExpression)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Name, b.ko.Spec.Name) {
		delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
	} else if a.ko.Spec.Name != nil && b.ko.Spec.Name != nil {
		if *a.ko.Spec.Name != *b.ko.Spec.Name {
			delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
		}
	}
	if len(a.ko.Spec.ProviderARNs) != len(b.ko.Spec.ProviderARNs) {
		delta.Add("Spec.ProviderARNs", a.ko.Spec.ProviderARNs, b.ko.Spec.ProviderARNs)
	} else if len(a.ko.Spec.ProviderARNs) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.ProviderARNs, b.ko.Spec.ProviderARNs) {
			delta.Add("Spec.ProviderARNs", a.ko.Spec.ProviderARNs, b.ko.Spec.ProviderARNs)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RestAPIID, b.ko.Spec.RestAPIID) {
		delta.Add("Spec.RestAPIID", a.ko.Spec.RestAPIID, b.ko.Spec.RestAPIID)
	} else if a.ko.Spec.RestAPIID != nil && b.ko.Spec.RestAPIID != nil {
		if *a.ko.Spec.RestAPIID != *b.ko.Spec.RestAPIID {
			delta.Add("Spec.RestAPIID", a.ko.Spec.RestAPIID, b.ko.Spec.RestAPIID)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.RestAPIRef, b.ko.Spec.RestAPIRef) {
		delta.Add("Spec.RestAPIRef", a.ko.Spec.RestAPIRef, b.ko.Spec.RestAPIRef)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Type, b.ko.Spec.Type) {
		delta.Add("Spec.Type", a.ko.Spec.Type, b.ko.Spec.Type)
	} else if a.ko.Spec.Type != nil && b.ko.Spec.Type != nil {
		if *a.ko.Spec.Type != *b.ko.Spec.Type {
			delta.Add("Spec.Type", a.ko.Spec.Type, b.ko.Spec.Type)
		}
	}

	return delta
}
